{  "info": {
    "name": "MU-Compass API",
    "description": "Comprehensive API collection for MU-Compass university platform - includes authentication, user management, academic content, courses, assignments, messaging, notifications, file uploads, scheduling, and all university services",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "departmentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "courseId",
      "value": "",
      "type": "string"
    },
    {
      "key": "enrollmentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "classId",
      "value": "",
      "type": "string"
    },
    {
      "key": "sectionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "professorId",
      "value": "",
      "type": "string"
    },
    {
      "key": "taId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testStudentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "csDepartmentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "currentDeptId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testEnrollmentId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.data.user.id);",
                  "    console.log('Tokens saved successfully');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"student@std.mans.edu.eg\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "    console.log('Tokens refreshed successfully');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          }
        },
        {
          "name": "Get Me",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            }
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          }
        },
        {
          "name": "Logout All Devices",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/logout-all",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout-all"]
            }
          }
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"oldPassword123\",\n  \"newPassword\": \"newPassword123\",\n  \"confirmNewPassword\": \"newPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "change-password"]
            }
          }
        }
      ]
    },
    {
      "name": "üë§ User Profile",
      "item": [
        {
          "name": "Update My Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"phone\": \"+201234567890\",\n  \"currentYear\": 3,\n  \"profileImageUrl\": \"https://example.com/avatar.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me"]
            }
          }
        },
        {
          "name": "Upload Avatar",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/users/upload-avatar",
              "host": ["{{baseUrl}}"],
              "path": ["users", "upload-avatar"]
            }
          }
        }
      ]
    },
    {
      "name": "üë• User Management (Admin)",
      "item": [
        {
          "name": "Get All Users (with filters)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?skip=0&take=20&search=john&role=STUDENT&isActive=true&sortBy=firstName&sortOrder=asc",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "skip",
                  "value": "0",
                  "description": "Number of records to skip (pagination)"
                },
                {
                  "key": "take",
                  "value": "20",
                  "description": "Number of records to take (pagination)"
                },
                {
                  "key": "search",
                  "value": "john",
                  "description": "Search in firstName, lastName, email",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "STUDENT",
                  "description": "Filter by user role",
                  "disabled": true
                },
                {
                  "key": "isActive",
                  "value": "true",
                  "description": "Filter by active status",
                  "disabled": true
                },
                {
                  "key": "sortBy",
                  "value": "firstName",
                  "description": "Sort by field (firstName, lastName, email, createdAt)",
                  "disabled": true
                },
                {
                  "key": "sortOrder",
                  "value": "asc",
                  "description": "Sort order (asc or desc)",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newstudent@std.mans.edu.eg\",\n  \"firstName\": \"Ahmed\",\n  \"lastName\": \"Hassan\",\n  \"collegeId\": \"202012345\",\n  \"role\": \"STUDENT\",\n  \"phone\": \"+201234567890\",\n  \"currentYear\": 1,\n  \"departmentId\": \"dept-123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/create",
              "host": ["{{baseUrl}}"],
              "path": ["users", "create"]
            }
          }
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Ahmed Updated\",\n  \"lastName\": \"Hassan Updated\",\n  \"role\": \"TA\",\n  \"isActive\": true,\n  \"currentYear\": 2,\n  \"phone\": \"+201987654321\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Delete User (Soft Delete)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Deactivate User",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/deactivate",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "deactivate"]
            }
          }
        },
        {
          "name": "Activate User",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/activate",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "activate"]
            }
          }
        },
        {
          "name": "Reset User Password",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "reset-password"]
            }
          }
        },
        {
          "name": "Transition Student Department",
          "description": "Transition a student from General Education (GE) to a specialized department (CS/IT/IS) when they advance to year 3. This endpoint:\n- Validates that the student is eligible for transition (year 2 -> 3)\n- Updates the student's department\n- Maintains academic integrity by enforcing department-specific course enrollments\n- Should be used when students complete their general education requirements",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('Department transition successful:', response.message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"newDepartmentId\": \"{{departmentId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/transition-department",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "transition-department"]
            }
          }
        }
      ]
    },
    {
      "name": "üìß Email Verification",
      "item": [
        {
          "name": "Send Verification Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@std.mans.edu.eg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/send-verification",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "send-verification"]
            }
          }
        },
        {
          "name": "Verify Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@std.mans.edu.eg\",\n  \"otp\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-email"]
            }
          }
        }
      ]
    },
    {
      "name": "üîë Password Reset",
      "item": [
        {
          "name": "Send Password Reset Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@std.mans.edu.eg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            }
          }
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset-token-here\",\n  \"newPassword\": \"newPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            }
          }
        }
      ]
    },
    {
      "name": "üè¢ Academic - Departments",
      "item": [
        {
          "name": "Get All Departments",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.length > 0) {",
                  "        pm.collectionVariables.set('departmentId', response.data[0].id);",
                  "        console.log('Department ID saved:', response.data[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/academic/departments",
              "host": ["{{baseUrl}}"],
              "path": ["academic", "departments"]
            }
          }
        },
        {
          "name": "Get Department by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/academic/departments/{{departmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["academic", "departments", "{{departmentId}}"]
            }
          }
        },
        {
          "name": "Create Department",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.id) {",
                  "        pm.collectionVariables.set('departmentId', response.data.id);",
                  "        console.log('Department ID saved:', response.data.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"COMPUTER_SCIENCE\",\n  \"code\": \"CS\",\n  \"description\": \"Computer Science Department\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/academic/departments",
              "host": ["{{baseUrl}}"],
              "path": ["academic", "departments"]
            }
          }
        },
        {
          "name": "Update Department",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"INFORMATION_SYSTEMS\",\n  \"description\": \"Updated Information Systems Department description\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/academic/departments/{{departmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["academic", "departments", "{{departmentId}}"]
            }
          }
        },
        {
          "name": "Delete Department",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/academic/departments/{{departmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["academic", "departments", "{{departmentId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üìö Academic - Courses",
      "item": [
        {
          "name": "üìñ Core Course Management",
          "item": [
            {
              "name": "Get All Courses",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.length > 0) {",
                      "        pm.collectionVariables.set('courseId', response.data[0].id);",
                      "        console.log('Course ID saved:', response.data[0].id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses"]
                }
              }
            },
            {
              "name": "Get Course by ID",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/{{courseId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "{{courseId}}"]
                }
              }
            },
            {
              "name": "Create Course",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.id) {",
                      "        pm.collectionVariables.set('courseId', response.data.id);",
                      "        console.log('Course ID saved:', response.data.id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Advanced Web Development\",\n  \"code\": \"CS401\",\n  \"description\": \"Advanced concepts in web development including React, Node.js, and database design\",\n  \"creditHours\": 3,\n  \"departmentId\": \"{{departmentId}}\",\n  \"targetYear\": 4\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses"]
                }
              }
            },
            {
              "name": "Update Course",
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Advanced Web Development\",\n  \"description\": \"Updated course description with modern frameworks\",\n  \"creditHours\": 4\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/{{courseId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "{{courseId}}"]
                }
              }
            },
            {
              "name": "Delete Course",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/{{courseId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "{{courseId}}"]
                }
              }
            },
            {
              "name": "Get Courses by Department",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses?department={{departmentId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses"],
                  "query": [
                    {
                      "key": "department",
                      "value": "{{departmentId}}",
                      "description": "Filter courses by department ID"
                    }
                  ]
                }
              }
            },
            {
              "name": "Get Courses by Year",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses?year=3",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses"],
                  "query": [
                    {
                      "key": "year",
                      "value": "3",
                      "description": "Filter courses by target year"
                    }
                  ]
                }
              }
            },
            {
              "name": "Search Courses",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses?search=web development",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses"],
                  "query": [
                    {
                      "key": "search",
                      "value": "web development",
                      "description": "Search courses by name or description"
                    }
                  ]
                }
              }
            },
            {
              "name": "Get Courses by Multiple Filters",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses?department={{departmentId}}&year=3&search=programming",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses"],
                  "query": [
                    {
                      "key": "department",
                      "value": "{{departmentId}}",
                      "description": "Filter by department ID"
                    },
                    {
                      "key": "year",
                      "value": "3",
                      "description": "Filter by target year"
                    },
                    {
                      "key": "search",
                      "value": "programming",
                      "description": "Search term"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "üìÖ Course Classes Management",
          "item": [
            {
              "name": "Get All Classes",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.data && response.data.data.length > 0) {",
                      "        pm.collectionVariables.set('classId', response.data.data[0].id);",
                      "        console.log('Class ID saved:', response.data.data[0].id);",
                      "        console.log('Total classes:', response.data.pagination.total);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/classes?skip=0&take=20",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "classes"],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0",
                      "description": "Number of records to skip (pagination)"
                    },
                    {
                      "key": "take",
                      "value": "20",
                      "description": "Number of records to take (pagination)"
                    },
                    {
                      "key": "courseId",
                      "value": "{{courseId}}",
                      "description": "Filter classes by course ID",
                      "disabled": true
                    }
                  ]
                }
              }
            },
            {
              "name": "Get Classes by Course",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/classes?courseId={{courseId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "classes"],
                  "query": [
                    {
                      "key": "courseId",
                      "value": "{{courseId}}",
                      "description": "Filter classes by course ID"
                    }
                  ]
                }
              }
            },
            {
              "name": "Get Class by ID",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/classes/{{classId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "classes", "{{classId}}"]
                }
              }
            },
            {
              "name": "Create Course Class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.id) {",
                      "        pm.collectionVariables.set('classId', response.data.id);",
                      "        console.log('Class ID saved:', response.data.id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"courseId\": \"{{courseId}}\",\n  \"classNumber\": 1,\n  \"dayOfWeek\": 2,\n  \"startTime\": \"10:00\",\n  \"endTime\": \"11:30\",\n  \"duration\": 90,\n  \"location\": \"Room A101\",\n  \"maxStudents\": 50\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/classes",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "classes"]
                }
              }
            },
            {
              "name": "Update Course Class",
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"location\": \"Room B203\",\n  \"maxStudents\": 60,\n  \"startTime\": \"11:00\",\n  \"endTime\": \"12:30\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/classes/{{classId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "classes", "{{classId}}"]
                }
              }
            },
            {
              "name": "Delete Course Class",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/classes/{{classId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "classes", "{{classId}}"]
                }
              }
            }
          ]
        },
        {
          "name": "üìù Course Sections Management",
          "item": [
            {
              "name": "Get All Sections",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.data && response.data.data.length > 0) {",
                      "        pm.collectionVariables.set('sectionId', response.data.data[0].id);",
                      "        console.log('Section ID saved:', response.data.data[0].id);",
                      "        console.log('Total sections:', response.data.pagination.total);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/sections?skip=0&take=20",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "sections"],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0",
                      "description": "Number of records to skip (pagination)"
                    },
                    {
                      "key": "take",
                      "value": "20",
                      "description": "Number of records to take (pagination)"
                    },
                    {
                      "key": "courseId",
                      "value": "{{courseId}}",
                      "description": "Filter sections by course ID",
                      "disabled": true
                    }
                  ]
                }
              }
            },
            {
              "name": "Get Sections by Course",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/sections?courseId={{courseId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "sections"],
                  "query": [
                    {
                      "key": "courseId",
                      "value": "{{courseId}}",
                      "description": "Filter sections by course ID"
                    }
                  ]
                }
              }
            },
            {
              "name": "Get Section by ID",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/sections/{{sectionId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "sections", "{{sectionId}}"]
                }
              }
            },
            {
              "name": "Create Course Section",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.id) {",
                      "        pm.collectionVariables.set('sectionId', response.data.id);",
                      "        console.log('Section ID saved:', response.data.id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"courseId\": \"{{courseId}}\",\n  \"taId\": \"{{taId}}\",\n  \"sectionNumber\": 1,\n  \"dayOfWeek\": 3,\n  \"startTime\": \"14:00\",\n  \"endTime\": \"15:30\",\n  \"duration\": 90,\n  \"location\": \"Lab C205\",\n  \"maxStudents\": 25\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/sections",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "sections"]
                }
              }
            },
            {
              "name": "Update Course Section",
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"location\": \"Lab D301\",\n  \"maxStudents\": 30,\n  \"startTime\": \"15:00\",\n  \"endTime\": \"16:30\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/sections/{{sectionId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "sections", "{{sectionId}}"]
                }
              }
            },
            {
              "name": "Delete Course Section",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/sections/{{sectionId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "sections", "{{sectionId}}"]
                }
              }
            }
          ]
        },
        {
          "name": "üë®‚Äçüè´ Professor Assignment Management",
          "item": [
            {
              "name": "Get Class Professors",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/classes/{{classId}}/professors",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "classes", "{{classId}}", "professors"]
                }
              }
            },
            {
              "name": "Assign Professor to Class",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"classId\": \"{{classId}}\",\n  \"professorId\": \"{{professorId}}\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/classes/professors",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "classes", "professors"]
                }
              }
            },
            {
              "name": "Remove Professor from Class",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/classes/{{classId}}/professors/{{professorId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "classes", "{{classId}}", "professors", "{{professorId}}"]
                }
              }
            }
          ]
        },
        {
          "name": "üéì Course Enrollment Management",
          "item": [
            {
              "name": "Get All Enrollments",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments?skip=0&take=20",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0",
                      "description": "Number of records to skip (pagination)"
                    },
                    {
                      "key": "take",
                      "value": "20",
                      "description": "Number of records to take (pagination)"
                    }
                  ]
                }
              }
            },
            {
              "name": "Get Enrollments by Course",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments?courseId={{courseId}}&skip=0&take=20",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"],
                  "query": [
                    {
                      "key": "courseId",
                      "value": "{{courseId}}",
                      "description": "Filter enrollments by course ID"
                    },
                    {
                      "key": "skip",
                      "value": "0",
                      "description": "Number of records to skip (pagination)"
                    },
                    {
                      "key": "take",
                      "value": "20",
                      "description": "Number of records to take (pagination)"
                    }
                  ]
                }
              }
            },
            {
              "name": "Get Enrollments by Class",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments?classId={{classId}}&skip=0&take=20",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"],
                  "query": [
                    {
                      "key": "classId",
                      "value": "{{classId}}",
                      "description": "Filter enrollments by class ID"
                    },
                    {
                      "key": "skip",
                      "value": "0",
                      "description": "Number of records to skip (pagination)"
                    },
                    {
                      "key": "take",
                      "value": "20",
                      "description": "Number of records to take (pagination)"
                    }
                  ]
                }
              }
            },
            {
              "name": "Get Enrollments by Section",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments?sectionId={{sectionId}}&skip=0&take=20",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"],
                  "query": [
                    {
                      "key": "sectionId",
                      "value": "{{sectionId}}",
                      "description": "Filter enrollments by section ID"
                    },
                    {
                      "key": "skip",
                      "value": "0",
                      "description": "Number of records to skip (pagination)"
                    },
                    {
                      "key": "take",
                      "value": "20",
                      "description": "Number of records to take (pagination)"
                    }
                  ]
                }
              }
            },
            {
              "name": "Create Course Enrollment (Student)",
              "description": "Enroll a student in a course with business logic validation:\n- Year 1-2 students (GE department) can only enroll in GE courses for their year\n- Year 3-4 students can enroll in courses from their specialized department (CS/IT/IS) for their year\n- Year 3-4 students can also enroll in GE courses (electives)\n- Students cannot enroll in courses outside their department/year restrictions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.id) {",
                      "        pm.collectionVariables.set('enrollmentId', response.data.id);",
                      "        console.log('Enrollment ID saved:', response.data.id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"courseId\": \"{{courseId}}\",\n  \"userId\": \"{{userId}}\",\n  \"classId\": \"{{classId}}\",\n  \"sectionId\": \"{{sectionId}}\",\n  \"role\": \"STUDENT\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"]
                }
              }
            },
            {
              "name": "Create Course Enrollment (Professor)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"courseId\": \"{{courseId}}\",\n  \"userId\": \"{{professorId}}\",\n  \"classId\": \"{{classId}}\",\n  \"role\": \"PROFESSOR\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"]
                }
              }
            },
            {
              "name": "Create Course Enrollment (TA)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"courseId\": \"{{courseId}}\",\n  \"userId\": \"{{taId}}\",\n  \"sectionId\": \"{{sectionId}}\",\n  \"role\": \"TA\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"]
                }
              }
            },
            {
              "name": "Test Enrollment Validation (Year 1-2 Student in CS Course - Should Fail)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Should reject enrollment of GE student in specialized course\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 403, 422]);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.message).to.include('cannot enroll');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"courseId\": \"CS101-course-id\",\n  \"userId\": \"year-1-student-id\",\n  \"classId\": \"cs-class-id\",\n  \"sectionId\": \"cs-section-id\",\n  \"role\": \"STUDENT\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"]
                }
              }
            },
            {
              "name": "Test Enrollment Validation (Year 3+ Student in GE Course - Should Succeed)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Should allow enrollment of year 3+ student in GE course\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "    if (pm.response.code === 201) {",
                      "        const response = pm.response.json();",
                      "        pm.expect(response.data).to.have.property('id');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"courseId\": \"GE101-course-id\",\n  \"userId\": \"year-3-student-id\",\n  \"classId\": \"ge-class-id\",\n  \"sectionId\": \"ge-section-id\",\n  \"role\": \"STUDENT\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"]
                }
              }
            },
            {
              "name": "Delete Course Enrollment",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments/{{enrollmentId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments", "{{enrollmentId}}"]
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîÑ Academic Workflow Tests",
      "description": "End-to-end test scenarios for the academic system including department transitions and enrollment validations",
      "item": [
        {
          "name": "Test Complete Student Journey",
          "item": [
            {
              "name": "1. Get Year 2 GE Student",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const users = pm.response.json().data;",
                      "    const year2Student = users.find(user => ",
                      "        user.role === 'STUDENT' && ",
                      "        user.currentYear === 2 && ",
                      "        user.department.code === 'GE'",
                      "    );",
                      "    if (year2Student) {",
                      "        pm.collectionVariables.set('testStudentId', year2Student.id);",
                      "        pm.collectionVariables.set('currentDeptId', year2Student.departmentId);",
                      "        console.log('Found Year 2 GE student:', year2Student.email);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users?role=STUDENT&take=50",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"],
                  "query": [
                    {
                      "key": "role",
                      "value": "STUDENT"
                    },
                    {
                      "key": "take",
                      "value": "50"
                    }
                  ]
                }
              }
            },
            {
              "name": "2. Get CS Department ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const departments = pm.response.json().data;",
                      "    const csDept = departments.find(dept => dept.code === 'CS');",
                      "    if (csDept) {",
                      "        pm.collectionVariables.set('csDepartmentId', csDept.id);",
                      "        console.log('Found CS Department ID:', csDept.id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/academic/departments",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "departments"]
                }
              }
            },
            {
              "name": "3. Try to Enroll Year 2 Student in CS Course (Should Fail)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Year 2 GE student should not be able to enroll in CS course\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 403, 422]);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.message).to.include('cannot enroll');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"courseId\": \"{{courseId}}\",\n  \"userId\": \"{{testStudentId}}\",\n  \"classId\": \"{{classId}}\",\n  \"sectionId\": \"{{sectionId}}\",\n  \"role\": \"STUDENT\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"]
                }
              }
            },
            {
              "name": "4. Transition Student to Year 3 and CS Department",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Department transition should succeed\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.message).to.include('transitioned');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"newDepartmentId\": \"{{csDepartmentId}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/{{testStudentId}}/transition-department",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", "{{testStudentId}}", "transition-department"]
                }
              }
            },
            {
              "name": "5. Update Student to Year 3 (Manual for Testing)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Student year update should succeed\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data.currentYear).to.equal(3);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"currentYear\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/{{testStudentId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", "{{testStudentId}}"]
                }
              }
            },
            {
              "name": "6. Now Try to Enroll Year 3 CS Student in CS Course (Should Succeed)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Year 3 CS student should be able to enroll in CS course\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "    if (pm.response.code === 201) {",
                      "        const response = pm.response.json();",
                      "        pm.expect(response.data).to.have.property('id');",
                      "        pm.collectionVariables.set('testEnrollmentId', response.data.id);",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"courseId\": \"{{courseId}}\",\n  \"userId\": \"{{testStudentId}}\",\n  \"classId\": \"{{classId}}\",\n  \"sectionId\": \"{{sectionId}}\",\n  \"role\": \"STUDENT\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/academic/courses/enrollments",
                  "host": ["{{baseUrl}}"],
                  "path": ["academic", "courses", "enrollments"]
                }
              }
            }
          ]
        }
      ]
    }
  ]
}