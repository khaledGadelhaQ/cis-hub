// Updated Academic Module Prisma Schema
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  STUDENT
  TA
  PROFESSOR
  ADMIN
}

enum EnrollmentStatus {
  ACTIVE
  DROPPED
  COMPLETED
}

enum EnrollmentRole {
  STUDENT
  TA
  PROFESSOR
}

enum DepartmentCode {
  CS  // Computer Science
  IS  // Information Systems
  IT  // Information Technology
  GE  // General
}

enum DepartmentName {
  COMPUTER_SCIENCE
  INFORMATION_SYSTEMS
  INFORMATION_TECHNOLOGY
  GENERAL
}


// Posts and News Feed

enum PostType {
  ANNOUNCEMENT
  EVENT
  NEWS
  URGENT
  GENERAL
}

enum PostScope {
  DEPARTMENT   // Visible to specific department
  YEAR         // Visible to specific year (1st, 2nd, etc.)
  GLOBAL       // Visible to everyone
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// File Uploads
enum UploadContext {
  CHAT_MESSAGE
  POST
  ASSIGNMENT
  PROFILE
  GENERAL
}

// ================================
// User Management & Authentication
// ================================

model User {
  id               String  @id @default(cuid())
  email            String  @unique
  passwordHash     String  @map("password_hash")
  firstName        String  @map("first_name")
  lastName         String  @map("last_name")
  collegeId        String? @map("college_id")
  phone            String?
  profileImageUrl  String? @map("profile_image_url")
  role             UserRole @default(STUDENT)
  currentYear      Int?    @map("current_year")
  departmentId     String? @map("department_id")
  isActive         Boolean @default(true) @map("is_active")
  isEmailVerified  Boolean @default(false) @map("is_email_verified")
  mustChangePassword Boolean @default(true) @map("must_change_password")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  department            Department?           @relation(fields: [departmentId], references: [id])
  sessions              UserSession[]
  enrollments           CourseEnrollment[]
  taughtClasses         CourseClass[]         @relation("ClassProfessor")
  taSections            CourseSection[]       @relation("SectionTA")
  courseProfessors      CourseProfessor[]     @relation("CourseProfessor")
  createdPosts Post[]
  filesUploaded File[] 
  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  refreshToken String   @unique @map("refresh_token")
  deviceInfo   String?  @map("device_info")
  isActive     Boolean  @default(true) @map("is_active")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// ================================
// Academic Structure
// ================================

model Department {
  id          String         @id @default(cuid())
  name        DepartmentName // COMPUTER_SCIENCE, INFORMATION_SYSTEMS, INFORMATION_TECHNOLOGY, GENERAL
  code        DepartmentCode @unique // CS, IS, IT, GE
  description String?
  createdAt   DateTime       @default(now()) @map("created_at")

  // Relations
  users   User[]
  courses Course[]
  posts Post[]

  @@map("departments")
}

model Course {
  id           String   @id @default(cuid())
  name         String   // e.g., "Operating Systems"
  code         String   // e.g., "CS301"
  description  String?
  creditHours  Int      @map("credit_hours")
  departmentId String   @map("department_id")
  targetYear   Int      @map("target_year")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  department       Department             @relation(fields: [departmentId], references: [id])
  classes          CourseClass[]
  sections         CourseSection[]
  enrollments      CourseEnrollment[]
  courseProfessors CourseProfessor[]

  @@map("courses")
}

// Junction table for many-to-many relationship between Course and Professor
model CourseProfessor {
  id         String   @id @default(cuid())
  courseId   String   @map("course_id")
  professorId String   @map("professor_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  // Relations
  course    Course @relation(fields: [courseId], references: [id])
  professor User   @relation("CourseProfessor", fields: [professorId], references: [id])

  @@unique([courseId, professorId])
  @@map("course_professors")
}

model CourseClass {
  id           String   @id @default(cuid())
  courseId     String   @map("course_id")
  professorId  String   @map("professor_id")
  classNumber  Int      @map("class_number")
  dayOfWeek    Int      @map("day_of_week") // 1=Monday, 7=Sunday
  startTime    String   @map("start_time")  // HH:MM format
  endTime      String   @map("end_time")    // HH:MM format
  duration     Int      // Duration in minutes
  location     String   // Room/Building
  maxStudents  Int      @default(40) @map("max_students")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  course      Course             @relation(fields: [courseId], references: [id])
  professor   User               @relation("ClassProfessor", fields: [professorId], references: [id])
  enrollments CourseEnrollment[]

  @@map("course_classes")
}

model CourseSection {
  id            String   @id @default(cuid())
  courseId      String   @map("course_id")
  taId          String   @map("ta_id")
  sectionNumber Int      @map("section_number")
  dayOfWeek     Int      @map("day_of_week") // 1=Monday, 7=Sunday
  startTime     String   @map("start_time")  // HH:MM format
  endTime       String   @map("end_time")    // HH:MM format
  duration      Int      // Duration in minutes
  location      String   // Room/Building
  maxStudents   Int      @default(40) @map("max_students")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  course      Course             @relation(fields: [courseId], references: [id])
  ta          User               @relation("SectionTA", fields: [taId], references: [id])
  enrollments CourseEnrollment[]

  @@map("course_sections")
}

model CourseEnrollment {
  id         String           @id @default(cuid())
  courseId   String           @map("course_id")
  userId     String           @map("user_id")
  classId    String?          @map("class_id")
  sectionId  String?          @map("section_id")
  role       EnrollmentRole
  enrolledAt DateTime         @default(now()) @map("enrolled_at")
  status     EnrollmentStatus @default(ACTIVE)

  // Relations
  course  Course         @relation(fields: [courseId], references: [id])
  user    User           @relation(fields: [userId], references: [id])
  class   CourseClass?   @relation(fields: [classId], references: [id])
  section CourseSection? @relation(fields: [sectionId], references: [id])

  @@unique([courseId, userId])
  @@map("course_enrollments")
}

// ================================
// Posts Feed 
// ================================

model Post {
  id           String      @id @default(cuid())
  title        String
  content      String
  authorId     String      @map("author_id")
  postType     PostType    @map("post_type")
  scope        PostScope   @default(GLOBAL)
  departmentId String?     @map("department_id")  // For department-specific posts
  targetYear   Int?        @map("target_year")    // For year-specific posts (1, 2, 3, 4)
  priority     Priority    @default(MEDIUM)
  isPinned     Boolean     @default(false) @map("is_pinned")
  publishedAt  DateTime?   @map("published_at")   // Can be scheduled for later
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relations
  author      User              @relation(fields: [authorId], references: [id])
  department  Department?       @relation(fields: [departmentId], references: [id])
  attachments File[]            @relation("PostAttachments")

  @@map("posts")
}

// Files

model File {
  id            String        @id @default(cuid())
  originalName  String        @map("original_name")
  storedName    String        @map("stored_name")     // UUID-based filename
  filePath      String        @map("file_path")       // Full path/URL
  fileSize      Int           @map("file_size")       // In bytes
  mimeType      String        @map("mime_type")       // image/jpeg, application/pdf, etc.
  uploadedBy    String        @map("uploaded_by")
  uploadContext UploadContext @map("upload_context")   // Where was it uploaded
  contextId     String?       @map("context_id")       // ID of post/message/etc.
  isPublic      Boolean       @default(false) @map("is_public")
  uploadedAt    DateTime      @default(now()) @map("uploaded_at")

  // Relations
  uploader User  @relation(fields: [uploadedBy], references: [id])
  post     Post? @relation("PostAttachments", fields: [contextId], references: [id])

  @@map("files")
}