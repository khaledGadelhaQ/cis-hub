// Updated Academic Module Prisma Schema
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  STUDENT
  TA
  PROFESSOR
  ADMIN
}

enum EnrollmentStatus {
  ACTIVE
  DROPPED
  COMPLETED
}

enum EnrollmentRole {
  STUDENT
  TA
  PROFESSOR
}

enum DepartmentCode {
  CS // Computer Science
  IS // Information Systems
  IT // Information Technology
  GE // General
}

enum DepartmentName {
  COMPUTER_SCIENCE
  INFORMATION_SYSTEMS
  INFORMATION_TECHNOLOGY
  GENERAL
}

// Posts and News Feed

enum PostType {
  ANNOUNCEMENT
  EVENT
  NEWS
  URGENT
  GENERAL
}

enum PostScope {
  DEPARTMENT // Visible to specific department
  YEAR // Visible to specific year (1st, 2nd, etc.)
  GLOBAL // Visible to everyone
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// File Uploads
enum UploadContext {
  CHAT_MESSAGE
  POST
  ASSIGNMENT
  PROFILE
  GENERAL
}

// ================================
// User Management & Authentication
// ================================

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  passwordHash       String   @map("password_hash")
  firstName          String   @map("first_name")
  lastName           String   @map("last_name")
  collegeId          String?  @map("college_id")
  phone              String?
  profileImageUrl    String?  @map("profile_image_url")
  role               UserRole @default(STUDENT)
  currentYear        Int?     @map("current_year")
  departmentId       String?  @map("department_id")
  isActive           Boolean  @default(true) @map("is_active")
  isEmailVerified    Boolean  @default(false) @map("is_email_verified")
  mustChangePassword Boolean  @default(true) @map("must_change_password")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  department      Department?        @relation(fields: [departmentId], references: [id])
  sessions        UserSession[]
  enrollments     CourseEnrollment[]
  classProfessors ClassProfessor[]   @relation("ClassProfessor")
  taSections      CourseSection[]    @relation("SectionTA")
  createdPosts    Post[]
  filesUploaded   File[]

  // Chat relations
  roomMemberships     RoomMember[]
  sentMessages        ChatMessage[]
  messageReadReceipts MessageReadReceipt[]
  pinnedMessages      PinnedMessage[]
  typingIndicators    TypingIndicator[]
  taRooms             ChatRoom[]            @relation("TARooms")
  privateChatsAsUser1 PrivateChatSettings[] @relation("PrivateChatsAsUser1")
  privateChatsAsUser2 PrivateChatSettings[] @relation("PrivateChatsAsUser2")

  // Notification relations
  deviceToken              DeviceToken?
  notificationPreference   NotificationPreference?
  chatNotificationSettings ChatNotificationSetting[]
  notifications            Notification[]

  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  refreshToken String   @unique @map("refresh_token")
  deviceInfo   String?  @map("device_info")
  isActive     Boolean  @default(true) @map("is_active")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// ================================
// Academic Structure
// ================================

model Department {
  id          String         @id @default(cuid())
  name        DepartmentName // COMPUTER_SCIENCE, INFORMATION_SYSTEMS, INFORMATION_TECHNOLOGY, GENERAL
  code        DepartmentCode @unique // CS, IS, IT, GE
  description String?
  createdAt   DateTime       @default(now()) @map("created_at")

  // Relations
  users   User[]
  courses Course[]
  posts   Post[]

  @@map("departments")
}

model Course {
  id           String   @id @default(cuid())
  name         String // e.g., "Operating Systems"
  code         String   @unique // e.g., "CS301"
  description  String?
  creditHours  Int?     @map("credit_hours")
  departmentId String   @map("department_id")
  targetYear   Int      @map("target_year")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  department  Department         @relation(fields: [departmentId], references: [id])
  classes     CourseClass[]
  sections    CourseSection[]
  enrollments CourseEnrollment[]

  // Chat relations
  chatRooms ChatRoom[]

  @@map("courses")
}

model CourseClass {
  id          String   @id @default(cuid())
  courseId    String   @map("course_id")
  classNumber Int      @map("class_number")
  dayOfWeek   Int      @map("day_of_week") // 1=Monday, 7=Sunday
  startTime   String   @map("start_time") // HH:MM format
  endTime     String   @map("end_time") // HH:MM format
  duration    Int // Duration in minutes
  location    String // Room/Building
  maxStudents Int      @default(40) @map("max_students")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  course      Course             @relation(fields: [courseId], references: [id])
  professors  ClassProfessor[] // Many-to-many with professors
  enrollments CourseEnrollment[]

  // Chat relations
  chatRoom ChatRoom?

  @@map("course_classes")
}

// Junction table for many-to-many relationship between CourseClass and Professor
model ClassProfessor {
  id          String   @id @default(cuid())
  classId     String   @map("class_id")
  professorId String   @map("professor_id")
  assignedAt  DateTime @default(now()) @map("assigned_at")

  // Relations
  class     CourseClass @relation(fields: [classId], references: [id])
  professor User        @relation("ClassProfessor", fields: [professorId], references: [id])

  @@unique([classId, professorId])
  @@map("class_professors")
}

model CourseSection {
  id            String   @id @default(cuid())
  courseId      String   @map("course_id")
  taId          String   @map("ta_id")
  sectionNumber Int      @map("section_number")
  dayOfWeek     Int      @map("day_of_week") // 1=Monday, 7=Sunday
  startTime     String   @map("start_time") // HH:MM format
  endTime       String   @map("end_time") // HH:MM format
  duration      Int // Duration in minutes
  location      String // Room/Building
  maxStudents   Int      @default(40) @map("max_students")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  course      Course             @relation(fields: [courseId], references: [id])
  ta          User               @relation("SectionTA", fields: [taId], references: [id])
  enrollments CourseEnrollment[]

  @@map("course_sections")
}

model CourseEnrollment {
  id         String           @id @default(cuid())
  courseId   String           @map("course_id")
  userId     String           @map("user_id")
  classId    String?          @map("class_id")
  sectionId  String?          @map("section_id")
  role       EnrollmentRole
  enrolledAt DateTime         @default(now()) @map("enrolled_at")
  status     EnrollmentStatus @default(ACTIVE)

  // Relations
  course  Course         @relation(fields: [courseId], references: [id])
  user    User           @relation(fields: [userId], references: [id])
  class   CourseClass?   @relation(fields: [classId], references: [id])
  section CourseSection? @relation(fields: [sectionId], references: [id])

  @@unique([courseId, userId])
  @@map("course_enrollments")
}

// ================================
// Posts Feed 
// ================================

model Post {
  id           String    @id @default(cuid())
  title        String
  content      String
  authorId     String    @map("author_id")
  postType     PostType  @map("post_type")
  scope        PostScope @default(GLOBAL)
  departmentId String?   @map("department_id") // For department-specific posts
  targetYear   Int?      @map("target_year") // For year-specific posts (1, 2, 3, 4)
  priority     Priority  @default(MEDIUM)
  isPinned     Boolean   @default(false) @map("is_pinned")
  publishedAt  DateTime? @map("published_at") // Can be scheduled for later
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  author      User        @relation(fields: [authorId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  attachments File[]      @relation("PostAttachments")

  @@map("posts")
}

// Files

model File {
  id            String        @id @default(cuid())
  originalName  String        @map("original_name")
  storedName    String        @map("stored_name") // UUID-based filename
  filePath      String        @map("file_path") // Full path/URL
  fileSize      Int           @map("file_size") // In bytes
  mimeType      String        @map("mime_type") // image/jpeg, application/pdf, etc.
  uploadedBy    String        @map("uploaded_by")
  uploadContext UploadContext @map("upload_context") // Where was it uploaded
  contextId     String?       @map("context_id") // ID of post/message/etc.
  isPublic      Boolean       @default(false) @map("is_public")
  uploadedAt    DateTime      @default(now()) @map("uploaded_at")

  // Relations
  uploader User  @relation(fields: [uploadedBy], references: [id])
  post     Post? @relation("PostAttachments", fields: [contextId], references: [id])

  // Chat relations
  messageFiles MessageFile[]

  @@map("files")
}

// ================================
// CHAT SYSTEM TABLES
// ================================

enum RoomType {
  CLASS // Course class group
  SECTION // TA sections group  
  PRIVATE // 1:1 chat
}

enum RoomMemberRole {
  ADMIN // Professors, TAs in their rooms
  MEMBER // Students
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM // "User joined", "Settings changed", etc.
}

// Chat Rooms (Groups)
model ChatRoom {
  id          String   @id @default(cuid())
  name        String // "CS301 Class", "TA Ahmed Sections", etc.
  description String?
  type        RoomType // CLASS, SECTION, PRIVATE
  isActive    Boolean  @default(true) @map("is_active")

  // Class room specific
  courseClassId String? @unique @map("course_class_id")

  // Section room specific (for TAs with multiple sections)
  taId     String? @map("ta_id")
  courseId String? @map("course_id")

  // Admin settings
  isMessagingEnabled Boolean @default(true) @map("is_messaging_enabled")
  slowModeSeconds    Int?    @map("slow_mode_seconds")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  courseClass CourseClass? @relation(fields: [courseClassId], references: [id])
  ta          User?        @relation("TARooms", fields: [taId], references: [id])
  course      Course?      @relation(fields: [courseId], references: [id])

  members          RoomMember[]
  messages         ChatMessage[]
  pinnedMessages   PinnedMessage[]
  typingIndicators TypingIndicator[]

  @@map("chat_rooms")
}

// Room Members
model RoomMember {
  id         String         @id @default(cuid())
  roomId     String         @map("room_id")
  userId     String         @map("user_id")
  role       RoomMemberRole @default(MEMBER)
  joinedAt   DateTime       @default(now()) @map("joined_at")
  lastSeenAt DateTime?      @map("last_seen_at")
  isMuted    Boolean        @default(false) @map("is_muted")
  mutedAt    DateTime?      @map("muted_at")
  mutedBy    String?        @map("muted_by") // Admin who muted this user
  isBlocked  Boolean        @default(false) @map("is_blocked") // Kicked and blocked
  blockedAt  DateTime?      @map("blocked_at")
  blockedBy  String?        @map("blocked_by") // Admin who blocked this user
  lastMessageAt DateTime?   @map("last_message_at") // For slow mode tracking

  // Relations
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_members")
}

// Chat Messages (auto-delete after 5 months)
model ChatMessage {
  id          String      @id @default(cuid())
  roomId      String      @map("room_id")
  senderId    String      @map("sender_id")
  content     String? // Text content (null for file-only messages, max 40MB files)
  messageType MessageType @default(TEXT) @map("message_type")

  // Reply functionality
  replyToId String? @map("reply_to_id")

  // Message status
  isEdited  Boolean @default(false) @map("is_edited")
  isDeleted Boolean @default(false) @map("is_deleted")

  // Timestamps (auto-delete after 5 months)
  sentAt    DateTime  @default(now()) @map("sent_at")
  editedAt  DateTime? @map("edited_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  room    ChatRoom      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender  User          @relation(fields: [senderId], references: [id])
  replyTo ChatMessage?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies ChatMessage[] @relation("MessageReplies")

  attachments    MessageFile[]
  readReceipts   MessageReadReceipt[]
  pinnedMessages PinnedMessage[]

  @@map("chat_messages")
}

// Message Files (extends existing File table)
model MessageFile {
  id        String @id @default(cuid())
  messageId String @map("message_id")
  fileId    String @map("file_id")

  // Relations
  message ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  file    File        @relation(fields: [fileId], references: [id])

  @@unique([messageId, fileId])
  @@map("message_files")
}

// Read Receipts
model MessageReadReceipt {
  id        String   @id @default(cuid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  readAt    DateTime @default(now()) @map("read_at")

  // Relations
  message ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_read_receipts")
}

// Pinned Messages
model PinnedMessage {
  id        String   @id @default(cuid())
  roomId    String   @map("room_id")
  messageId String   @map("message_id")
  pinnedBy  String   @map("pinned_by")
  pinnedAt  DateTime @default(now()) @map("pinned_at")

  // Relations
  room    ChatRoom    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  message ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [pinnedBy], references: [id])

  @@unique([roomId, messageId])
  @@map("pinned_messages")
}

// Typing Indicators (In-memory, but can be persisted for reliability)
model TypingIndicator {
  id        String   @id @default(cuid())
  roomId    String   @map("room_id")
  userId    String   @map("user_id")
  startedAt DateTime @default(now()) @map("started_at")

  // Relations
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("typing_indicators")
}

// Private Chat Settings
model PrivateChatSettings {
  id               String   @id @default(cuid())
  user1Id          String   @map("user1_id")
  user2Id          String   @map("user2_id")
  isBlockedByUser1 Boolean  @default(false) @map("is_blocked_by_user1")
  isBlockedByUser2 Boolean  @default(false) @map("is_blocked_by_user2")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user1 User @relation("PrivateChatsAsUser1", fields: [user1Id], references: [id])
  user2 User @relation("PrivateChatsAsUser2", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
  @@map("private_chat_settings")
}

// ================================
// NOTIFICATION SYSTEM
// ================================

enum NotificationType {
  PRIVATE_MESSAGE
  GROUP_MESSAGE
  ASSIGNMENT_DEADLINE
  COURSE_ANNOUNCEMENT
  GRADE_UPDATE
  SYSTEM_ALERT
  POST_CREATED
  POST_UPDATED
  POST_PINNED
  POST_FILE_UPLOADED
  POST_URGENT
  POST_DEADLINE_REMINDER
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  RETRY
}

// FCM Device Tokens (one per user since single session)
model DeviceToken {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  token     String   @unique
  platform  String   @default("android") // android, ios, web
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device_tokens")
}

// User Notification Preferences
model NotificationPreference {
  id                    String  @id @default(cuid())
  userId                String  @unique @map("user_id")
  
  // Global settings
  notificationsEnabled  Boolean @default(true) @map("notifications_enabled")
  showMessagePreview    Boolean @default(true) @map("show_message_preview")
  notificationSound     Boolean @default(true) @map("notification_sound")
  vibrate               Boolean @default(true)
  
  // Chat specific
  privateMessagesEnabled Boolean @default(true) @map("private_messages_enabled")
  groupMessagesEnabled   Boolean @default(true) @map("group_messages_enabled")
  
  // Academic specific  
  assignmentReminders    Boolean @default(true) @map("assignment_reminders")
  courseAnnouncements    Boolean @default(true) @map("course_announcements")
  gradeUpdates          Boolean @default(true) @map("grade_updates")
  
  // Timing
  quietHoursStart       String? @map("quiet_hours_start") // "22:00"
  quietHoursEnd         String? @map("quiet_hours_end")   // "07:00"
  
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

// Chat-specific notification settings (mute individual chats)
model ChatNotificationSetting {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  chatId    String   @map("chat_id") // roomId for groups, or generated private chat ID
  chatType  String   @map("chat_type") // "private" or "group"
  isMuted   Boolean  @default(false) @map("is_muted")
  mutedUntil DateTime? @map("muted_until") // For temporary mutes
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId, chatType])
  @@map("chat_notification_settings")
}

// Notification Queue/History
model Notification {
  id          String             @id @default(cuid())
  userId      String             @map("user_id")
  type        NotificationType
  status      NotificationStatus @default(PENDING)
  
  // Content
  title       String
  body        String
  data        Json?              // Additional data payload
  
  // FCM specific
  fcmMessageId String?           @map("fcm_message_id")
  
  // Retry logic
  attempts    Int                @default(0)
  maxAttempts Int                @default(3) @map("max_attempts")
  lastAttempt DateTime?          @map("last_attempt")
  nextRetry   DateTime?          @map("next_retry")
  
  // Context
  sourceId    String?            @map("source_id") // messageId, assignmentId, etc.
  sourceType  String?            @map("source_type") // "message", "assignment", etc.
  
  // Timestamps
  scheduledFor DateTime?         @map("scheduled_for") // For delayed notifications
  sentAt      DateTime?          @map("sent_at")
  deliveredAt DateTime?          @map("delivered_at")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([status, nextRetry])
  @@index([scheduledFor])
  @@map("notifications")
}
