version: '3.8'

services:
  # CIS-HUB API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cis-hub-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/cis_hub
      - REDIS_URL=redis://redis:6379
      - JWT_ACCESS_SECRET=your-super-secret-jwt-access-key
      - JWT_REFRESH_SECRET=your-super-secret-jwt-refresh-key
      - PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads:/app/uploads
    networks:
      - cis-hub-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: cis-hub-postgres
    environment:
      - POSTGRES_DB=cis_hub
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cis-hub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cis-hub-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cis-hub-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Nginx Reverse Proxy 
  nginx:
    image: nginx:alpine
    container_name: cis-hub-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - cis-hub-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  uploads:

networks:
  cis-hub-network:
    driver: bridge
